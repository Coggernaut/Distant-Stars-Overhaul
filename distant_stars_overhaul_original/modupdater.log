DEBUG - mod_path: D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original
mod_outpath: D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original
file_list: ['D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ambient_objects', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ambient_objects\\DSO_ambient_objects.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\archaeological_site_types', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\archaeological_site_types\\00_dso_arc_sites.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\bombardment_stances', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\bombardment_stances\\00_nanite_bombardment_stances.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\buildings', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\buildings\\nanite_pop_assembly_buildings.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\buildings\\vanilla_buildings_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\bypass', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\bypass\\00_lgate_bypasses.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\casus_belli', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\casus_belli\\00_nanite_casus_belli.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_sets', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_sets\\dcv_crew_required_sets.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_templates', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_templates\\00_L_critters.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_templates\\dcv_utilities.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\component_templates\\nanite_weapons.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\country_types', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\country_types\\country_types_distant_stars_overhaul.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\crisis_levels', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\crisis_levels\\00_DSO_crisis_levels.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\crisis_objectives', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\crisis_objectives\\00_DSO_crisis_objectives.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\decisions', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\decisions\\05_ancient_relics_decisions_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\deposits', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\deposits\\04_distant_stars_deposits_overhaul.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\deposits\\bh_deposits.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\deposits\\dessanu_relic_deposits.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\districts', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\districts\\nanite_forge_world_districts.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\economic_categories', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\economic_categories\\DSO_economy_categories.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\edicts', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\edicts\\00_worshipper_edicts.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\edicts\\02_dso_edict_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\event_chains', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\event_chains\\00_event_chain_distant_stars_overhaul.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\global_ship_designs', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\global_ship_designs\\dso_relic_events_ship_designs.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\global_ship_designs\\L_space_monster_designs.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\governments', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\governments\\civics', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\governments\\civics\\nanite_civics.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\governments\\nanite_governments.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\inline_scripts', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\inline_scripts\\00_README.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\inline_scripts\\zones', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\inline_scripts\\zones\\shared_nanite_forgeworld_bio_reactor_zone.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\megastructures', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\megastructures\\harvester_station.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\megastructures\\nanite_habitats.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\on_actions', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\on_actions\\bh_on_actions.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\opinion_modifiers', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\opinion_modifiers\\00_nanite_opinion_modifiers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\personalities', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\personalities\\00_Nanite_personalities.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\planet_classes', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\planet_classes\\nanite_planet_classes.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_categories', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_categories\\DSO_overseer_drones.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_faction_types', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_faction_types\\00_gateway_covenant_worshipers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_jobs', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_jobs\\02_nanite_jobs.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_jobs\\dessanu_relic_jobs.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\pop_jobs\\vanilla_job_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\prescripted_flags', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\prescripted_flags\\dso_empire_flags.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\random_names', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\random_names\\00_pop_faction_names_gateway_covenant.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\random_names\\bh_empire_names.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_effects', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_effects\\DSO_scripted_nanite_ecosystem_effects.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_effects\\z_gray_goo_effects_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_effects\\z_lcluster_scripted_effects_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_effects\\z_scripted_nanite_overhaul_effects.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_loc', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_loc\\DSO_scripted_loc.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\!!01-merger_planets.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\!04_trigger_dummy.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\01_industry_district_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\105_merger_type_triggers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\dso_scripted triggers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\harvester_engine_target.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\nanite_ecosystem_triggers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\z_fallen_empire_override_triggers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_triggers\\z_vanilla_override_triggers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_variables', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\scripted_variables\\dso_merger_scripted_variables.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\section_templates', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\section_templates\\L_critters.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\section_templates\\nanite_mothership.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ship_sizes', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ship_sizes\\00_ship_sizes_colony.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ship_sizes\\L_Critters.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\ship_sizes\\nanite_mothership.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\solar_system_initializers', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\solar_system_initializers\\nanite_system_initializers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\special_projects', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\special_projects\\00_harvester_projects.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\special_projects\\00_nanite_ecosystem_projects.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\special_projects\\00_projects_distant_stars_overhaul.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\starbase_buildings', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\starbase_buildings\\starbase_nanite_buildings.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\start_screen_messages', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\start_screen_messages\\bh_start_screen_messages.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\star_classes', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\star_classes\\DSO_star_classes.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\static_modifiers', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\static_modifiers\\04_static_modifiers_factions_gateway_covenant.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\static_modifiers\\bh_static_modifiers.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\technology', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\technology\\Nanite_distant_stars_tech.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\terraform', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\terraform\\bh_basic_terraform_links.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\traits', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\traits\\DSO_species_traits_habitability.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\traits\\species_traits_nanites.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\war_goals', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\war_goals\\00_nanite_war_goals.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zones', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zones\\99_HOW_TO_ZONE.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zones\\DSO_zones.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zone_slots', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zone_slots\\99_HOW_TO_ZONE.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/common\\zone_slots\\DSO_zone_slots.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\01_distars_events_3_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\01_gray_goo_events_override.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\bh_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\dso_relic_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\For_testing.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\gateway_pursuer_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\harvester_engine_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\harvest_world_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\outcome_gray_tempest_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\outcome_mimic_dessanu_events.txt', 'D:\\Gog Games\\Settings\\Distant-Stars-Overhaul.git\\distant_stars_overhaul_original/events\\outcome_nanite_ecosystem_events.txt']
INFO - 
--- Running v4.0 Flag Conversion for Prescripted Countries ---
INFO - ✨ No flag blocks needed conversion.

DEBUG - extract_scripted_triggers from: D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers
DEBUG - Scanning for scripted triggers in: D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\!!01-merger_planets.txt: ['merg_is_hab_ringworld', 'merg_is_habitat', 'is_pd_hive_world', 'merg_is_hive_world', 'merg_is_gas_giant', 'merg_is_machine_world', 'merg_is_arcology', 'merg_is_relic_world', 'gpm_is_planet_class_city', 'merg_is_molten', 'merg_is_toxic', 'merg_is_frozen', 'merg_is_barren', 'merg_is_barren_cold', 'merg_is_gaia_basic', 'merg_is_shielded_world']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\!04_trigger_dummy.txt: ['hfe_trigger_insane_admiral_trait', 'hfe_trigger_is_human_fallen', 'is_zofe_country', 'is_planetary_diversity_ringworld', 'is_pd_habitat', 'is_pd_hive_arcology', 'is_pd_robot_arcology', 'is_pd_machine', 'is_pd_arcology', 'is_progenitor_empires']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\01_industry_district_override.txt: ['has_any_industry_zone']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\105_merger_type_triggers.txt: ['merg_is_default_empire', 'is_default_or_fallen', 'merg_is_fallen_empire', 'merg_is_awakened_fe', 'is_marauder', 'is_endgame_crisis']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\harvester_engine_target.txt: ['can_destroy_planet_with_PLANET_KILLER_HARVESTER']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\nanite_ecosystem_triggers.txt: ['is_nanite_gaia', 'is_nanite_forgeworld', 'is_nanite_habitat_shielded', 'is_bh_harvest', 'is_bh_harvest_colony', 'is_bh_harvested', 'is_nanite_gas_giant', 'is_dessanu_relic']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\z_fallen_empire_override_triggers.txt: ['is_fallen_empire', 'is_default_or_fallen', 'is_regular_empire', 'is_fallen_empire_spiritualist']
DEBUG - Found potential triggers in D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original\common\scripted_triggers\z_vanilla_override_triggers.txt: ['colonizable_planet', 'habitable_planet', 'can_have_habitable_deposits', 'can_have_sensory_readings']
INFO - Discovered 49 unique custom scripted trigger(s) in the mod.
DEBUG - Mod custom triggers: {'merg_is_hab_ringworld': '!!01-merger_planets.txt', 'merg_is_habitat': '!!01-merger_planets.txt', 'is_pd_hive_world': '!!01-merger_planets.txt', 'merg_is_hive_world': '!!01-merger_planets.txt', 'merg_is_gas_giant': '!!01-merger_planets.txt', 'merg_is_machine_world': '!!01-merger_planets.txt', 'merg_is_arcology': '!!01-merger_planets.txt', 'merg_is_relic_world': '!!01-merger_planets.txt', 'gpm_is_planet_class_city': '!!01-merger_planets.txt', 'merg_is_molten': '!!01-merger_planets.txt', 'merg_is_toxic': '!!01-merger_planets.txt', 'merg_is_frozen': '!!01-merger_planets.txt', 'merg_is_barren': '!!01-merger_planets.txt', 'merg_is_barren_cold': '!!01-merger_planets.txt', 'merg_is_gaia_basic': '!!01-merger_planets.txt', 'merg_is_shielded_world': '!!01-merger_planets.txt', 'hfe_trigger_insane_admiral_trait': '!04_trigger_dummy.txt', 'hfe_trigger_is_human_fallen': '!04_trigger_dummy.txt', 'is_zofe_country': '!04_trigger_dummy.txt', 'is_planetary_diversity_ringworld': '!04_trigger_dummy.txt', 'is_pd_habitat': '!04_trigger_dummy.txt', 'is_pd_hive_arcology': '!04_trigger_dummy.txt', 'is_pd_robot_arcology': '!04_trigger_dummy.txt', 'is_pd_machine': '!04_trigger_dummy.txt', 'is_pd_arcology': '!04_trigger_dummy.txt', 'is_progenitor_empires': '!04_trigger_dummy.txt', 'has_any_industry_zone': '01_industry_district_override.txt', 'merg_is_default_empire': '105_merger_type_triggers.txt', 'is_default_or_fallen': 'z_fallen_empire_override_triggers.txt', 'merg_is_fallen_empire': '105_merger_type_triggers.txt', 'merg_is_awakened_fe': '105_merger_type_triggers.txt', 'is_marauder': '105_merger_type_triggers.txt', 'is_endgame_crisis': '105_merger_type_triggers.txt', 'can_destroy_planet_with_PLANET_KILLER_HARVESTER': 'harvester_engine_target.txt', 'is_nanite_gaia': 'nanite_ecosystem_triggers.txt', 'is_nanite_forgeworld': 'nanite_ecosystem_triggers.txt', 'is_nanite_habitat_shielded': 'nanite_ecosystem_triggers.txt', 'is_bh_harvest': 'nanite_ecosystem_triggers.txt', 'is_bh_harvest_colony': 'nanite_ecosystem_triggers.txt', 'is_bh_harvested': 'nanite_ecosystem_triggers.txt', 'is_nanite_gas_giant': 'nanite_ecosystem_triggers.txt', 'is_dessanu_relic': 'nanite_ecosystem_triggers.txt', 'is_fallen_empire': 'z_fallen_empire_override_triggers.txt', 'is_regular_empire': 'z_fallen_empire_override_triggers.txt', 'is_fallen_empire_spiritualist': 'z_fallen_empire_override_triggers.txt', 'colonizable_planet': 'z_vanilla_override_triggers.txt', 'habitable_planet': 'z_vanilla_override_triggers.txt', 'can_have_habitable_deposits': 'z_vanilla_override_triggers.txt', 'can_have_sensory_readings': 'z_vanilla_override_triggers.txt'}
DEBUG - len tar3=272 len tar4=174:
[(re.compile('\\bstatic_rotation = yes\\s*'), ('common/component_templates', '')), (re.compile('\\bowner\\.species\\b'), 'owner_species'), (re.compile('\\bplanet\\.owner\\b'), 'planet_owner'), (re.compile('\\bship_upkeep_mult ='), 'ships_upkeep_mult ='), (re.compile('\\b(contact_rule = )script_only'), ('common/country_types', '\\1on_action_only')), (re.compile('\\b(any|every|random)_(research|mining)_station\\b'), '\\2_station'), (re.compile('\\badd_(energy|unity|food|minerals|influence|alloys|consumer_goods|exotic_gases|volatile_motes|rare_crystals|sr_living_metal|sr_dark_matter|sr_zro|(?:physics|society|engineering(?:_research))) = (-?@), 'add_resource = { \\1 = \\2 }'), (re.compile('\\bhas_ethic = (\\"?)ethic_gestalt_consciousness\\1\\b'), (('T', 'is_gestalt'), 'is_gestalt = yes')), (re.compile('\\bhas_authority = (\\"?)auth_machine_intelligence\\1\\b'), (('T', 'is_machine_empire'), 'is_machine_empire = yes')), (re.compile('\\bhas_authority = (\\"?)auth_hive_mind\\1\\b'), (('T', 'is_hive_empire'), 'is_hive_empire = yes')), (re.compile('\\bhas_authority = (\\"?)auth_corporate\\1\\b'), (('T', 'is_megacorp'), 'is_megacorp = yes')), (re.compile('\\bis_country\\b'), 'is_same_empire'), (re.compile('\\bis_same_value = ([\\w\\.:]+\\.(?:controller|(?:space_)?owner)(?:\\.overlord)?(?:[\\s}]+|$))'), 'is_same_empire = \\1'), (re.compile('((?:controller|(?:space_)?owner|overlord|country|federation_ally) = \\{|is_ai = (?:yes|no))\\s+is_same_value\\b'), '\\1 is_same_empire'), (re.compile('(^\\b|[^\\._])owner = \\{\\s*is_same_(?:empire|value) = ([\\w\\.:]+)\\s*\\}'), '\\1is_owned_by = \\2'), (re.compile('(?<!from = \\{ )\\b(is_robotic)_species ='), ([re.compile('common/species_rights.*'), 'common/armies'], '\\1 =')), (re.compile('\\bhas_trait = trait_psionic\\b'), (('T', 'is_psionic_species'), 'is_psionic_species = yes')), (re.compile('\\bhas_trait = trait_latent_psionic\\b'), (('T', 'is_latent_psionic_species'), 'is_latent_psionic_species = yes')), (re.compile('\\bhas_any_farming_district_or_buildings\\b'), 'has_any_farming_district_or_building'), (re.compile('\\bcreated_merc_number\\b'), 'created_enclave_number'), (re.compile('\\bupgrade_mercenary_starbase\\b'), 'upgrade_enclave_starbase'), (re.compile('\\bhas_leader_flag = (renowned|legendary)_leader\\b'), 'is_leader_tier = leader_tier_\\1'), (re.compile('\\bdefense_armies_add\\b'), 'planet_\\g<0>'), (re.compile('\\b(?:any|every|random|count|ordered)_species_pop\\b'), '\\g<0>_group'), (re.compile('\\b((?:leader_)?trait_)(adaptable|aggressive|agrarian_upbringing|architectural_interest|army_veteran|bureaucrat|butcher|cautious|eager|engineer|enlister|environmental_engineer|defence_engineer|politi), '\\1\\2'), (re.compile('\\b((?:leader_)?trait_)(annihilator|archaeo_specialization|armada_logistician|artillerist|artillery_specialization|border_guard|carrier_specialization|commanding_presence|conscripter|consul_general|c), '\\1\\2_2'), (re.compile('\\bplanet_storm_dancers\\b'), 'planet_entertainers'), (re.compile('\\bis_pleasure_seeker\\b'), 'is_pleasure_seeker_empire'), (re.compile('\\bhas_any_industry_district\\b'), (('T', 'has_any_industry_zone'), 'has_any_industry_zone')), (re.compile('\\bhas_any_mining_district\\b'), (('T', 'has_any_capped_planet_mining_district'), 'has_any_capped_planet_mining_district')), (re.compile('\\b(?:add|remove)_leader_traits_after_modification\\b'), 'update_leader_after_modification'), (re.compile('\\bgenerate_servitor_assmiliator_secondary_pops\\b'), 'generate_civic_secondary_pops'), (re.compile('\\bmake_pop_zombie\\b'), 'create_zombie_pop_group'), (re.compile('\\btrait_frozen_planet_preference\\b'), 'trait_cold_planet_preference'), (re.compile('\\btrait_cyborg_climate_adjustment_frozen\\b'), 'trait_cyborg_climate_adjustment_cold'), (re.compile('\\bis_pop\\b'), 'is_same_value'), (re.compile('\\b(count_owned_pop)s?\\b'), '\\1_amount'), (re.compile('\\b(random_owned_pop)\\b'), 'weighted_\\1_group'), (re.compile('\\b((?:any|every|ordered)_owned_pop|create_pop) ='), '\\1_group ='), (re.compile('\\bnum_(sapient_pop|pop)s\\s*([<=>]+)\\s*(\\d+)'), <function <lambda> at 0x00000282490DE700>), (re.compile('\\b(min_pops_to_kill_pop\\s*[<=>]+)\\s*([1-9]\\d?)\\b'), ('common/bombardment_stances', <function multiply_by_100 at 0x00000282490D9310>)), (re.compile('^on_pop_(abducted|resettled|added|rights_change)\\b'), ('common/on_actions', 'on_pop_group_\\1')), (re.compile('^on_pop_ethic_changed\\b'), ('common/on_actions', 'on_daily_pop_ethics_divergence')), (re.compile('^([^#]*?)\\bbase_cap_amount\\b'), ('common/buildings', '\\1planet_limit')), (re.compile('\\buse_ship_kill_target\\b'), ('common/component_templates', 'use_ship_main_target')), (re.compile('^(potential_crossbreeding_chance )'), ('common/traits', '# \\1')), (re.compile('^(ship_piracy_suppression_add )'), ('common/ship_sizes', '# \\1')), (re.compile('^(has_system_trade_value )'), '# \\1'), (re.compile('\\btrait_(?:advanced_(?:budding|gaseous_byproducts|scintillating|volatile_excretions|phototrophic)|(?:advanced|harvested|lithoid)_radiotrophic)\\b'), ''), (re.compile('\\bstandard_trade_routes_module = {}'), ('common/country_types', '# \\g<0>')), (re.compile('^(monthly_progress|completion_event)'), ('common/observation_station_missions', '# \\1')), (re.compile('\\b(collects_trade = (?:yes|no))'), ('common/starbase_levels', '# \\1')), (re.compile('\\b(clothes_texture_index = \\d+)'), (['common/pop_jobs', 'common/pop_categories'], '# \\1')), (re.compile('^(ignores_favorite =)'), ('common/pop_jobs', '# \\1')), (re.compile('\\bnum_(sapient_pop|pop)s\\b'), '\\1_amount'), (re.compile('\\b(clear_pop_category = yes)'), '# \\1'), (re.compile('\\bkill_pop = yes'), 'kill_single_pop = yes'), (re.compile('\\bpop_has_(ethic|trait|happiness)\\b'), 'pop_group_has_\\1'), (re.compile('\\bpop_percentage\\b'), 'pop_amount_percentage'), (re.compile('\\bhas_(skill|level)\\b'), <function <lambda> at 0x00000282490DE790>), (re.compile('\\bhas_job\\b'), 'has_job_type'), (re.compile('\\bhas_colony_progress [<=>]+ \\d+\\b'), 'colony_age > 0'), (re.compile('\\bcategory = pop\\b'), 'category = pop_group'), (re.compile('\\b(owner_(main_)?)?species = { has_trait = trait_psionic }\\b'), 'can_talk_to_prethoryn = yes'), (re.compile('\\bpop_force_add_ethic = ([\\d\\w\\.:]+)\\b'), 'pop_force_add_ethic = { ethic = \\1 percentage = 1 }'), (re.compile('\\b(create_pop_group = \\{ species = [\\w\\.:]+ )count( = \\d+)'), '\\g<1>size\\g<2>00'), (re.compile('\\b(set|set_timed|has|remove)_pop_flag\\b'), '\\1_pop_group_flag'), (re.compile('\\bhas_active_tradition = tr_genetics_finish_extra_traits\\b'), 'can_harvest_dna = yes'), (re.compile('\\bis_pop_category = purge\\b'), (('T', 'is_being_purged'), 'is_being_purged = yes')), (re.compile('\\bguardian_warden\\b'), 'guardian_opus_sentinel'), (re.compile('\\bbuilding_clinic\\b'), 'building_medical_2'), (re.compile('\\bplanet_priests\\b'), 'planet_bureaucrats'), (re.compile('\\bjob_(?:priest|death_priest)_add\\b'), 'job_bureaucrat_add'), (re.compile('\\bjob_archaeoengineers_add\\b'), 'job_biologist_add'), (re.compile('\\bjob_archaeo_unit_add\\b'), 'job_bath_attendant_machine_add'), (re.compile('\\bpop_event\\b'), 'pop_group_event'), (re.compile('\\bjob_merchant_add\\b'), 'job_trader_add'), (re.compile('^(?:triggered_)?(pop_group_modifier)\\b'), ('common/pop_jobs', 'triggered_planet_\\1_for_all')), (re.compile('^(triggered_pop_)(modifier)\\b'), (['common/pop_categories', 'common/inline_scripts', 'common/pop_jobs', 'common/species_rights', 'common/traits'], '\\1group_\\2')), (re.compile('\\bpop_habitability\\b'), 'pop_low_habitability'), (re.compile('\\bpop_growth_from_immigration\\b'), 'planet_resettlement_unemployed_mult'), (re.compile('\\bplanet_immigration_pull_(mult|add) = (-?[\\d.]+)'), <function <lambda> at 0x00000282490DE820>), (re.compile('\\btrade_value_(mult|add)\\b'), 'planet_jobs_trade_produces_\\1'), (re.compile('pop_modifier\\b'), 'pop_group_modifier'), (re.compile('\\bpop_growth_speed\\b'), 'founder_species_growth_mult'), (re.compile('pop_growth_speed_reduction = -?(\\d)'), 'logistic_growth_mult = -\\1'), (re.compile('\\bpop_job_trade_(mult|add)\\b'), 'trader_jobs_bonus_workforce_\\1'), (re.compile('\\bpop_demotion_time_(mult|add)\\b'), 'pop_unemployment_demotion_time_\\1'), (re.compile('\\bpop(_defense_armies_(?:mult|add))\\b'), 'planet\\1'), (re.compile('\\bplanet_(?:priests|administrators)_(\\w+_(?:mult|add))\\s+'), 'planet_bureaucrats_\\1 '), (re.compile('\\bplanet_administrators\\b'), ('common/pop_jobs', 'planet_bureaucrats')), (re.compile('\\bplanet_pop_assembly_organic_(mult|add)\\b'), 'bonus_pop_growth_\\1'), (re.compile('\\bplanet_jobs_robotic_produces_(mult|add)\\b'), 'pop_bonus_workforce_\\1'), (re.compile('\\bplanet_jobs_robot_worker_produces_(mult|add)\\b'), 'worker_and_simple_drone_cat_bonus_workforce_\\1'), (re.compile('\\bplanet_researchers_society_research_produces_(mult|add)\\b'), 'planet_doctors_society_research_produces_\\1'), (re.compile('\\b((?:num_unemployed|free_(?:jobs|housing|amenities))\\s*[<=>]+)\\s*(-?[1-9]\\d?)\\b'), <function multiply_by_100 at 0x00000282490D9310>), (re.compile('\\b(job_(?!(?:calculator_biologist|calculator_physicist|calculator_engineer|soldier_stability|researcher_naval_cap|knight_commander))\\w+?_add =)\\s*(-?(?:[1-9]|[1-3]\\d?))\\b'), <function multiply_by_100 at 0x00000282490D9310>), (re.compile('\\bentertainer_jobs_bonus_workforce_mult\\b'), 'influential_jobs_bonus_workforce_mult'), (re.compile('\\bdistrict_(\\w+?)_max\\b'), 'district_\\1_max_add'), (re.compile('\\bpop_workforce_mult\\b'), 'pop_bonus_workforce_mult'), (re.compile('@economic_plan_food_target_extra\\b'), ('common/economic_plans', '20')), (re.compile('@economic_plan_minerals_target\\b'), (['common/economic_plans', 'common/scripted_triggers', 'common/inline_scripts'], '@economic_plan_mineral_target')), (re.compile('\\bhas_authority = (\\"?)auth_(imperial|democratic|oligarchic|dictatorial)\\1\\b'), (re.compile('^([^_]+)(_(?!trigger)[^/_]+|[^_]*$)(?(2)/([^_]+)_[^/_]+$)?'), 'is_\\2_authority = yes')), (re.compile('\\bset_gestalt_node_protrait_effect\\b'), 'set_gestalt_node_portrait_effect'), (re.compile('(\\w+modifier = )crucible_colony\\b'), '\\1gestation_colony'), (re.compile('\\bhas_synthethic_dawn = yes'), 'host_has_dlc = "Synthetic Dawn Story Pack"'), (re.compile('\\bhas_origin = origin_post_apocalyptic\\b'), (('T', 'is_apocalyptic_empire'), 'is_apocalyptic_empire = yes')), (re.compile('\\bhas_origin = origin_subterranean\\b'), (('T', 'is_subterranean_empire'), 'is_subterranean_empire = yes')), (re.compile('\\bhas_origin = origin_void_dwellers\\b'), (('T', 'has_void_dweller_origin'), 'has_void_dweller_origin = yes')), (re.compile('\\bhas_(?:valid_)?civic = civic_worker_coop\\b'), (('T', 'is_worker_coop_empire'), 'is_worker_coop_empire = yes')), (re.compile('\\btr_cybernetics_assembly_standards\\b'), 'tr_cybernetics_augmentation_overload'), (re.compile('\\btr_cybernetics_assimilator_crucible\\b'), 'tr_cybernetics_assimilator_gestation'), (re.compile('\\btr_synthetics_synthetic_age\\b'), 'tr_synthetics_transubstatiation_synthesis'), (re.compile('\\bactivate_crisis_progression = yes\\b'), 'activate_crisis_progression = nemesis_path'), (re.compile('\\@faction_base_unity\\b'), '@faction_base_output'), (re.compile('\\bd_hab_nanites_1\\b'), 'd_hab_nanites_3'), (re.compile('^has_country_flag = cyborg_empire\\b'), (('T', 'is_cyborg_empire'), 'is_cyborg_empire = yes')), (re.compile('\\bis_(berserk_)?fallen_machine_empire\\b'), 'is_fallen_empire_\\1machine'), (re.compile('\\bgovernment_election_years_(add|mult)\\b'), 'election_term_years_\\1'), (re.compile('\\bhas_ascension_perk = ap_engineered_evolution\\b'), (('T', 'has_genetic_ascension'), 'has_genetic_ascension = yes')), (re.compile('\\bgive_next_tech_society_option_effect = yes'), 'give_next_breakthrough_effect = { AREA = society }'), (re.compile('\\b(veteran_class_locked_trait|negative|subclass_trait|destiny_trait) = yes'), ('common/traits', <function <lambda> at 0x00000282490E3160>)), (re.compile('\\badd_trait = leader_trait_(maniacal)'), 'add_or_level_up_veteran_trait_effect = { TRAIT = leader_trait_\\1 }'), (re.compile('\\bleader_age = '), 'leader_lifespan_add = '), (re.compile('^on_survey = \\{'), ('common/on_actions', 'on_survey_planet = {')), (re.compile('councilor_trait = no\\n?'), ('common/traits', '')), (re.compile('^([^#]+?\\w+gray_)governor\\b'), '\\1official'), (re.compile('(class|CLASS) = ("?)governor\\b'), '\\1 = \\2official'), (re.compile('(class|CLASS) = ("?)(?:admiral|general)\\b'), '\\1 = \\2commander'), (re.compile('leader = ("?)(?:admiral|general)\\b'), ('common/special_projects', 'leader = \\1commander')), (re.compile('= subclass_governor_(?:visionary|economist|pioneer)'), '= subclass_official_governor'), (re.compile('= subclass_admiral_(?:tactician|aggressor|strategist)'), '= subclass_commander_admiral'), (re.compile('= subclass_general_(?:invader|protector|marshall)'), '= subclass_commander_general'), (re.compile('= subclass_scientist_analyst'), '= subclass_scientist_governor'), (re.compile('= subclass_scientist_researcher'), '= subclass_scientist_councilor'), (re.compile('\\bcouncilor_gestalt_(governor|scientist|admiral|general)\\b'), <function <lambda> at 0x00000282490E31F0>), (re.compile('\\bleader_trait_clone_(army|army_fertile)_admiral'), 'leader_trait_clone_\\1_commander'), (re.compile('\\bleader_trait_civil_engineer'), 'leader_trait_manufacturer'), (re.compile('\\bleader_trait_urbanist_'), 'trait_ruler_architectural_sense_'), (re.compile('\\bleader_trait_par_zealot(_\\d)?\\b'), 'leader_trait_crusader'), (re.compile('\\bleader_trait_repair_crew\\b'), 'leader_trait_brilliant_shipwright'), (re.compile('\\bleader_trait_demolisher_destiny\\b'), 'leader_trait_demolisher'), (re.compile('\\bleader_trait_deep_space_explorer\\b'), 'leader_trait_xeno_cataloger'), (re.compile('\\bleader_trait_supreme_admiral\\b'), 'leader_trait_military_overseer'), (re.compile('\\bleader_trait_pilferer\\b'), 'leader_trait_tzrynn_tithe'), (re.compile('\\bleader_trait_kidnapper\\b'), 'leader_trait_interrogator'), (re.compile('\\bleader_trait_watchdog\\b'), 'leader_trait_energy_weapon_specialist'), (re.compile('\\bleader_trait_insightful\\b'), 'leader_trait_academic_dig_site_expert'), (re.compile('\\bleader_trait_experimenter\\b'), 'leader_trait_juryrigger'), (re.compile('\\bleader_trait_fanatic\\b'), 'leader_trait_master_gunner'), (re.compile('\\bleader_trait_glory_seeker'), 'leader_trait_butcher'), (re.compile('\\bleader_trait_army_logistician(_\\d)?\\b'), 'leader_trait_energy_weapon_specialist'), (re.compile('\\bleader_trait_fotd_admiral\\b'), 'leader_trait_fotd_commander'), (re.compile('\\bassist_research_mult = ([-\\d.]+)\\b'), <function <lambda> at 0x00000282490E3280>), (re.compile('^(valid_for_all_(?:ethics|origins)\\b)'), ('common/traits', '# \\1 removed in v3.10')), (re.compile('^leader_class = \\{((?:\\s+(?:admiral|general|governor|scientist)){1,4})\\s+\\}'), (['common/traits', 'common/governments/councilors'], <function leader_class_replacement at 0x00000282490DE430>)), (re.compile('\\bimperial_origin_start_spawn_effect ='), 'origin_spawn_system_effect ='), (re.compile('\\b(?:is_orbital_ring = no|has_starbase_size >= starbase_outpost)'), (('T', 'is_normal_starbase'), 'is_normal_starbase = yes')), (re.compile('\\b(?:is_normal_starbase = no|has_starbase_size >= orbital_ring_tier_1)'), (('T', 'is_orbital_ring'), 'is_orbital_ring = yes')), (re.compile('\\bcan_see_in_list = (yes|no)'), <function <lambda> at 0x00000282490E3310>), (re.compile('\\bsector(\\.| = \\{ )leader\\b'), 'sector\\1sector_capital.leader'), (re.compile('\\bset_is_female = yes'), 'set_gender = female'), (re.compile('\\bcountry_command_limit_'), 'command_limit_'), (re.compile('\\btrait = random_trait\\b\\s*'), ''), (re.compile('\\bhas_chosen_trait_ruler ='), 'has_chosen_one_leader_trait ='), (re.compile('\\btype = ruler\\b'), 'ruler = yes'), (re.compile('\\b(add|has|remove)_ruler_trait\\b'), '\\1_trait'), (re.compile('\\bclass = ruler\\b'), 'class = random_ruler'), (re.compile('\\bleader_trait_(?:admiral|general|governor|ruler|scientist)_(\\w*(?:chosen|psionic|brainslug|synthetic|cyborg|erudite))\\b'), 'leader_trait_\\1'), (re.compile('\\bleader_trait_(charismatic|newboot|flexible_programming|rigid_programming|general_mercenary_warrior|demoralizer|cataloger|maintenance_loop|unstable_code_base|parts_cannibalizer|erratic_morality_cor), <function <lambda> at 0x00000282490E33A0>), (re.compile('([^#]*?)\\blength = 0'), ('common/edicts', '\\1length = -1')), (re.compile('([^#]*?)\\badd_random_leader_trait = yes'), (['common/scripted_effects', 'events'], '\\1add_trait = random_common')), (re.compile('[^#]*?\\bleader_trait = (?:all|\\{\\s*\\w+\\s*\\})\\s*'), ('common/traits', '')), (re.compile('([^#]*?)\\bleader_class ?= ?\\"?ruler\\"?'), ('prescripted_countries', '\\1leader_class="governor"')), (re.compile('\\bleader_class = ruler\\b'), 'is_ruler = yes'), (re.compile('[^#]*?\\bis_researching_area = \\w+'), ''), (re.compile('\\bvariable_string = "([\\w.:]+)"'), 'variable_string = "[\\1]"'), (re.compile('\\bset_mia = yes'), 'set_mia = mia_return_home'), (re.compile('\\bset_primitive_age( =|_effect =)'), 'set_pre_ftl_age\\1'), (re.compile('\\bis_country_type = primitive'), 'is_primitive = yes'), (re.compile('\\bcreate_primitive_(species|blockers) = yes'), 'create_pre_ftl_\\1 = yes'), (re.compile('\\bsetup_primitive_planet = yes'), 'setup_pre_ftl_planet = yes'), (re.compile('\\bremove_primitive_flags = yes'), 'remove_pre_ftl_flags = yes'), (re.compile('\\bnuke_primitives_(\\w*?)effect ='), 'nuke_pre_ftls_\\1effect ='), (re.compile('\\bgenerate(\\w*?)_primitives_on_planet ='), 'generate\\1_pre_ftls_on_planet ='), (re.compile('\\bcreate_(\\w*?)primitive_empire ='), 'create_\\1pre_ftl_empire ='), (re.compile('\\bcreate_(hegemon|common_ground)_member_(\\d) = yes'), 'create_\\1_member = { NUM = \\2 }'), (re.compile('_planet_flag = primitives_nuked_themselves'), '_planet_flag = pre_ftls_nuked_themselves'), (re.compile('sound = event_primitive_civilization'), 'sound = event_pre_ftl_civilization'), (re.compile('\\bpop_assembly_speed'), 'planet_pop_assembly_mult'), (re.compile('\\"%O%'), ('common/name_lists', '"$ORD$')), (re.compile('\\bis_ringworld ='), (('T', 'has_ringworld_output_boost'), 'has_ringworld_output_boost =')), (re.compile('\\btoken = citizenship_assimilation\\b'), ('common/species_rights', 'is_assimilation = yes')), (re.compile('\\btoken = citizenship_full(?:_machine)?\\b'), ('common/species_rights', 'is_full_citizenship = yes')), (re.compile('\\btoken = citizenship_slavery\\b'), ('common/species_rights', 'is_slavery = yes')), (re.compile('\\btoken = citizenship_purge(?:_machine)?\\b'), ('common/species_rights', 'is_purge = yes')), (re.compile('sequential_name = ([^\\s_]+_)(?:xx([^x\\s_]+)_(?:ROM|ORD)|([^x\\s_]+)xx_(?:ROM|SEQ))'), ('common/name_lists', 'sequential_name = \\1\\2\\3')), (re.compile('\\bhas_ascension_perk = ap_transcendence\\b'), 'has_tradition = tr_psionics_finish'), (re.compile('\\bhas_ascension_perk = ap_evolutionary_mastery\\b'), 'has_tradition = tr_genetics_resequencing'), (re.compile('\\bhas_technology = \\"?tech_genetic_resequencing\\"?\\b'), 'has_tradition = tr_genetics_resequencing'), (re.compile('\\bcan_remove_beneficial_traits\\b'), 'can_remove_beneficial_genetic_traits'), (re.compile('\\b(format|noun|adjective|prefix_format) = \\"([^{}\\n#\\"]+)\\"'), ('common/random_names', '\\1 = "{\\2}"')), (re.compile('\\b(any|every|random|count|ordered)_bordering_country\\b'), '\\1_country_neighbor_to_system'), (re.compile('\\bcountry_(?!base_)(energy|unity|food|minerals|influence|alloys|consumer_goods|exotic_gases|volatile_motes|rare_crystals|sr_living_metal|sr_dark_matter|sr_zro|(?:physics|society|engineering(?:_resea), 'country_base_\\1_produces_add'), (re.compile('\\bhair( =)'), ('prescripted_countries', 'attachment\\1')), (re.compile('\\bhair(_selector =)'), ('gfx/portraits/portraits', 'attachment\\1')), (re.compile('\\bship_archeaological_site_clues_add ='), 'ship_archaeological_site_clues_add ='), (re.compile('\\bfraction = \\{'), ('common/ai_budget', 'weight = {')), (re.compile('\\bstatic_m([ai][xn])(\\s*)=\\s*\\{'), ('common/ai_budget', 'desired_m\\1\\2=\\2{')), (re.compile('^([^#]*?\\bbuildings_(?:simple_allow|no_\\w+) = yes)'), ('common/buildings', '# \\1')), (re.compile('\\bis_subject_type = vassal'), 'is_subject = yes'), (re.compile('\\bis_subject_type = (\\w+)'), 'any_agreement = { agreement_preset = preset_\\1 }'), (re.compile('\\bpreset = (tributary|vassal|satellite|scion|signatory|subsidiary|protectorate|dominion|thrall|satrapy)'), 'preset = preset_\\1'), (re.compile('\\bsubject_type = (\\w+)'), 'preset = preset_\\1'), (re.compile('\\badd_100_unity_per_year_passed ='), 'add_500_unity_per_year_passed ='), (re.compile('\\bcount_drones_to_recycle ='), 'count_robots_to_recycle ='), (re.compile('\\bbranch_office_building = yes'), ('common/buildings', 'owner_type = corporate')), (re.compile('\\bconstruction_blocks_others = yes'), ('common/megastructures', 'construction_blocks_and_blocked_by = multi_stage_type')), (re.compile('\\bhas_species_flag = racket_species_flag'), 'exists = event_target:racket_species is_same_species = event_target:racket_species'), (re.compile('\\s+building(_basic_income_check|_relaxed_basic_income_check|s_upgrade_allow) = (?:yes|no)\\n?'), ('common/buildings', '')), (re.compile('\\b(country_election_)influence_(cost_mult)'), '\\1\\2'), (re.compile('\\bwould_work_job'), ('common/game_rules', 'can_work_specific_job')), (re.compile('\\bhas_(?:valid_)?civic = civic_reanimated_armies'), (re.compile('^([^_]+)(_(?!trigger)[^/_]+|[^_]*$)(?(2)/([^_]+)_[^/_]+$)?'), 'is_reanimator = yes')), (re.compile('\\bjob_administrator'), 'job_politician'), (re.compile('\\b(has_any_(?:farming|generator)_district)\\b'), '\\1_or_building'), (re.compile('^modification = (?:no|yes)\\s*?\\n'), {'species': ('common/traits', 'species_potential_add = { always = no }\n', '')}), (re.compile('\\bfree_guarantee_days = \\d+'), ''), (re.compile('\\badd_tech_progress_effect'), 'add_tech_progress'), (re.compile('\\bgive_scaled_tech_bonus_effect'), 'add_monthly_resource_mult'), (re.compile('\\bclear_uncharted_space = \\{\\s*from = ([^\\n{}# ])\\s*\\}'), 'clear_uncharted_space = \\1'), (re.compile('\\bhomeworld ='), ('common/governments/civics', 'starting_colony =')), (re.compile('\\b(set_)(primitive) = yes'), '\\1country_type = \\2'), (re.compile('text_icon = military_size_space_creature'), ('common/ship_sizes', 'icon = ship_size_space_monster')), (re.compile('\\btext_icon = military_size_'), ('common/ship_sizes', 'icon = ship_size_military_')), (re.compile('^robotic = (yes|no)\\t*\\n'), ('common/species_classes', '')), (re.compile('^(icon)_frame = ([1-9][0-4]?)'), ('common/armies', <function <lambda> at 0x00000282490E3670>)), (re.compile('^(icon)_frame = (\\d+)'), ('common/planet_classes', <function <lambda> at 0x00000282490E3700>)), (re.compile('^(icon) = (\\d+)'), ('common/colony_types', <function <lambda> at 0x00000282490E3790>)), (re.compile('\\bcount_diplo_ties'), 'count_relation'), (re.compile('\\bhas_non_swapped_tradition'), 'has_active_tradition'), (re.compile('\\bhas_swapped_tradition'), 'has_active_tradition'), (re.compile('\\bis_for_colonizeable'), 'is_for_colonizable'), (re.compile('\\bcolonizeable_planet'), 'colonizable_planet'), (re.compile('\\b(first_contact_)attack_not_allowed'), '\\1cautious'), (re.compile('\\bsurveyed = \\{'), 'set_surveyed = {'), (re.compile('\\bset_surveyed = (yes|no)'), 'surveyed = \\1'), (re.compile('has_completed_special_project\\s+'), 'has_completed_special_project_in_log '), (re.compile('has_failed_special_project\\s+'), 'has_failed_special_project_in_log '), (re.compile('species = last_created(\\s)'), 'species = last_created_species\\1'), (re.compile('owner = last_created(\\s)'), 'owner = last_created_country\\1'), (re.compile('\\b(any|every|random|count|ordered)_pop ='), '\\1_owned_pop ='), (re.compile('\\b(any|every|random|count|ordered)_planet ='), '\\1_galaxy_planet ='), (re.compile('\\b(any|every|random|count|ordered)_ship ='), '\\1_fleet_in_system ='), (re.compile('\\b(any|every|random|count|ordered)_sector ='), '\\1_owned_sector ='), (re.compile('\\b(any|every|random|count|ordered)_recruited_leader ='), '\\1_owned_leader ='), (re.compile('\\b(any|every|random)_war_(attacker|defender) ='), '\\1_\\2 ='), (re.compile('\\bcount_planets\\s+'), 'count_system_planet '), (re.compile('\\bcount_ships\\s+'), 'count_fleet_in_system '), (re.compile('\\bcount(_owned)?_pops\\s+'), 'count_owned_pop '), (re.compile('\\bcount_(owned|fleet)_ships\\s+'), 'count_owned_ship '), (re.compile('\\bspawn_megastructure = \\{([^{}#]+)location ='), 'spawn_megastructure = {\\1planet ='), (re.compile('is_country_type = default\\s+has_monthly_income = \\{\\s*resource = (\\w+) value <=? \\d'), 'no_resource_for_component = { RESOURCE = \\1'), (re.compile('\\b(pops_can_(be_colonizers|migrate|reproduce|join_factions|be_slaves)|can_generate_leaders|pops_have_happiness|pops_auto_growth|pop_maintenance) = (yes|no)\\s*'), ''), (re.compile('\\bhas_crisis_level = crisis_level_5\\b'), (re.compile('^([^_]+)(_(?!trigger)[^/_]+|[^_]*$)(?(2)/([^_]+)_[^/_]+$)?'), 'has_been_declared_crisis = yes')), (re.compile('\\b(or|not|nor|and)\\s*='), <function add_code_cosmetic.<locals>.<lambda> at 0x00000282491058B0>), (re.compile('\\bNOT = \\{\\s*(\\w+)\\s*([<=>]+)\\s*(@\\w+|-?[\\d.]+)\\s+\\}'), <function add_code_cosmetic.<locals>.<lambda> at 0x00000282491313A0>), (re.compile('\\bNOT = \\{\\s*(num_\\w+|\\w+?(?:_passed)) = (\\d+)\\s*\\}'), '\\1 != \\2'), (re.compile('(^|\\s|\\.)fleet = \\{\\s*(destroy|delete)_fleet = this\\s*\\}'), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131310>), (re.compile('\\bchange_all = no'), ''), (re.compile('\\b(has_(?:population|migration)_control) = (yes|no)'), '\\1 = { type = \\2 country = prev.owner }'), (re.compile('\\bNO[RT] = \\{\\s*((?:leader|owner|controller|space_owner|(?:prev){1,4}|(?:from){1,4}|root|this|event_target:[\\w@]+|owner_or_space_owner|any_\\w+|limit|trigger) = \\{)\\s*([^\\s]+) = yes\\s*\\}\\s*, re.IGNORECASE), '\\1 \\2 = no }'), (re.compile('(^|\\s|\\.)(?:space_)?owner = \\{ (?:is_country_type = default|merg_is_default_empire = (yes|no)) \\}'), (re.compile('^([^_]+)(_(?!trigger)[^/_]+|[^_]*$)(?(2)/([^_]+)_[^/_]+$)?'), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131430>))]
WARNING - Potentially deprecated Syntax (v3.0: ai_weight for buildings removed except for branch offices): ai_weight = in line 36 file nanite_pop_assembly_buildings.txt

DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: '		potential = {
			is_nanite_forgeworld = yes
		}
		job_DSO_nanite_forge_overseer_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> 04_distant_stars_deposits_overhaul.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = {
				is_regular_empire = yes
				has_government = gov_spiritualist_gateway_worshiper
			}
		}
		job_DSO_dessanu_relic_chronicler_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> dessanu_relic_deposits.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_hive_empire = yes }
		}
		job_DSO_dessanu_odd_factory_worker_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> dessanu_relic_deposits.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_regular_empire = yes }
		}
		job_DSO_dessanu_odd_factory_worker_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> dessanu_relic_deposits.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		job_bio_processor_drone_add = 500
		planet_jobs_energy_produces_mult = 0.01' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_fallen_empire_spiritualist = yes }
			has_active_building = building_energy_nexus
		}
		job_fe_acolyte_generator_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_fallen_empire_spiritualist = yes }
		}
		job_fe_acolyte_generator_add = 200' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = {
				is_gestalt = no
				is_fallen_empire_spiritualist = no
			}
			has_active_building = building_energy_nexus
		}
		job_technician_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = {
				is_gestalt = no
				is_fallen_empire_spiritualist = no
			}
		}
		job_technician_add = 200' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_gestalt = yes }
			has_active_building = building_energy_nexus
		}
		job_technician_drone_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		job_technician_drone_add = 400
		planet_housing_add = 100
		planet_jobs_energy_produces_mult = 0.01' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_hive_empire = yes }
		}
		job_technician_drone_add = 300' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = {
				has_valid_civic = civic_agrarian_idyll
			}
		}
		planet_housing_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { is_machine_empire = yes }
		}
		job_fabricator_add = 500
		planet_jobs_alloys_produces_mult = 0.01' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { has_active_tradition = tr_prosperity_optimized_nexus }
		}
		planet_housing_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { has_technology = tech_housing_2 }
		}
		planet_housing_add = 100
		job_maintenance_drone_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = owner
			owner = { has_technology = tech_housing_1 }
		}
		planet_housing_add = 100' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> nanite_forge_world_districts.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: '
			any_playable_country = {
				has_migration_access = root.owner
				any_owned_planet = { has_modifier = DSO_dessanu_heritage_world } # Not a real planet_modifier (only static)
			}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> 00_gateway_covenant_worshipers.txt
DEBUG - BLIND MATCH: '
				any_playable_country = {
					has_communications = prev
					NOT = { is_same_empire = prev }
					any_owned_planet = { has_modifier = DSO_dessanu_heritage_world } # Not a real planet_modifier (only static)
				}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> 00_gateway_covenant_worshipers.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: '
	possible = {
		complex_specialist_job_check_trigger = yes
	' [re.compile('(\\n\\t+)(possible = \\{(\\1\\t)?(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?))(drone|worker|specialist|ruler)_job_check_trigger = yes\\s, re.IGNORECASE|re.ASCII), '\\1possible_precalc = can_fill_\\4_job\\1\\2'] <class 'list'> 02_nanite_jobs.txt
DEBUG - BLIND MATCH: '
	possible = {
		complex_specialist_job_check_trigger = yes
	' [re.compile('(\\n\\t+)(possible = \\{(\\1\\t)?(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3(?(3).*\\3|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?)?|\\s*?))(drone|worker|specialist|ruler)_job_check_trigger = yes\\s, re.IGNORECASE|re.ASCII), '\\1possible_precalc = can_fill_\\4_job\\1\\2'] <class 'list'> vanilla_job_override.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Brood"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 20
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant3
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_amoeba3.patrol.1
							has_planet_flag = l_amoeba_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba3.patrol.2
							has_planet_flag = l_amoeba_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba3.patrol.3
							has_planet_flag = l_amoeba_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba3.patrol.4
							has_planet_flag = l_amoeba_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Brood"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 20
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_amoeba2.patrol.1
							has_planet_flag = l_amoeba_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba2.patrol.2
							has_planet_flag = l_amoeba_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba2.patrol.3
							has_planet_flag = l_amoeba_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba2.patrol.4
							has_planet_flag = l_amoeba_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Brood"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 20
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_amoeba.patrol.1
							has_planet_flag = l_amoeba_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba.patrol.2
							has_planet_flag = l_amoeba_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba.patrol.3
							has_planet_flag = l_amoeba_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_amoeba.patrol.4
							has_planet_flag = l_amoeba_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 10
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Orange"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant4
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 7
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Teal"
				}
			}
			while = {
				count = 5
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Teal"
				}
			}
			set_location = event_target:l_amoeba_gas_giant4
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 9
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Zebra"
				}
			}
			while = {
				count = 5
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Zebra"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant3
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 5
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Orange"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Orange"
				}
			}
			set_location = event_target:l_amoeba_gas_giant3
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 3
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 14
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant2
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 5
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Zebra"
				}
			}
			while = {
				count = 21
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Zebra"
				}
			}
			set_location = event_target:l_amoeba_gas_giant2
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 5
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Zebra"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Zebra"
				}
			}
			set_location = {
				target = event_target:l_amoeba_gas_giant1
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Swarm"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 3
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = event_target:l_amoeba_gas_giant1
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Hunters"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 6
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_tiyanki_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_tiyanki_hunter }
				save_event_target_as = hunting_l_amoeba
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Hunters"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 8
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Orange"
				}
			}
			while = {
				count = 4
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Orange"
				}
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_tiyanki_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_tiyanki_hunter }
				save_event_target_as = hunting_l_amoeba
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Hunters"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 10
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Zebra"
				}
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_tiyanki_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_tiyanki_hunter }
				save_event_target_as = hunting_l_amoeba
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Hunters"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 7
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Teal"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Teal"
				}
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_tiyanki_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_tiyanki_hunter }
				save_event_target_as = hunting_l_amoeba
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Amoeba Hunters"
		effect = {
			set_owner = event_target:l_amoeba_elder
			while = {
				count = 8
				create_ship = {
					name = " "
					design = "L_Large_Space_Organism_Blue"
				}
			}
			while = {
				count = 4
				create_ship = {
					name = " "
					design = "L_Small_Space_Organism_Blue"
				}
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_tiyanki_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_tiyanki_hunter }
				save_event_target_as = hunting_l_amoeba
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Brood"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 16
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:l_gas_giant2
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_tiyanki4.patrol.1
							has_planet_flag = tiyanki_l_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki4.patrol.2
							has_planet_flag = tiyanki_l_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki4.patrol.3
							has_planet_flag = tiyanki_l_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki4.patrol.4
							has_planet_flag = tiyanki_l_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Brood"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 19
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:l_gas_giant3
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_tiyanki3.patrol.1
							has_planet_flag = tiyanki_l_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki3.patrol.2
							has_planet_flag = tiyanki_l_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki3.patrol.3
							has_planet_flag = tiyanki_l_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki3.patrol.4
							has_planet_flag = tiyanki_l_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Brood"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 14
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:l_gas_giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_tiyanki2.patrol.1
							has_planet_flag = tiyanki_l_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki2.patrol.2
							has_planet_flag = tiyanki_l_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki2.patrol.3
							has_planet_flag = tiyanki_l_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki2.patrol.4
							has_planet_flag = tiyanki_l_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Brood"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 22
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:l_gas_giant1
				distance = 25
				angle = 94
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			queue_actions = {
				repeat = {
					find_closest_planet = {
						trigger = {
							id = l_tiyanki.patrol.1
							has_planet_flag = tiyanki_l_gas_giant2
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki.patrol.2
							has_planet_flag = tiyanki_l_gas_giant3
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki.patrol.3
							has_planet_flag = tiyanki_l_gas_giant4
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					find_closest_planet = {
						trigger = {
							id = l_tiyanki.patrol.4
							has_planet_flag = tiyanki_l_gas_giant1
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 4
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Bull"
				}
			}
			set_location = {
				target = event_target:l_gas_giant4
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 4
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Bull"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 9
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = event_target:l_gas_giant4
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 4
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 2
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			set_location = {
				target = event_target:l_gas_giant3
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 2
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 6
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Bull"
				}
			}
			while = {
				count = 12
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 2
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = event_target:l_gas_giant3
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 2
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 4
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = {
				target = event_target:l_gas_giant2
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 2
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 5
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Bull"
				}
			}
			while = {
				count = 2
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 3
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = event_target:l_gas_giant2
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 2
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 4
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = {
				target = event_target:l_gas_giant1
				distance = 12
				angle = 0
			}
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Herd"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			while = {
				count = 5
				create_ship = {
					name = "Cow"
					design = "L_Tiyanki_Cow"
				}
			}
			while = {
				count = 5
				create_ship = {
					name = "Bull"
					design = "L_Tiyanki_Bull"
				}
			}
			while = {
				count = 8
				create_ship = {
					name = "Hatchling"
					design = "NAME_Tiyanki_Hatchling"
				}
			}
			while = {
				count = 9
				create_ship = {
					name = "Calf"
					design = "L_Tiyanki_Calf"
				}
			}
			set_location = event_target:l_gas_giant1
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Hunters"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_amoeba_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_amoeba_hunter }
				save_event_target_as = hunting_l_tiyanki
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Hunters"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_amoeba_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_amoeba_hunter }
				save_event_target_as = hunting_l_tiyanki
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Hunters"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_amoeba_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_amoeba_hunter }
				save_event_target_as = hunting_l_tiyanki
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Hunters"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_amoeba_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_amoeba_hunter }
				save_event_target_as = hunting_l_tiyanki
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - BLIND MATCH: '
	create_fleet = {
		name = "L-Tiyanki Hunters"
		effect = {
			set_owner = event_target:l_tiyanki_elder
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Bull"
				design = "L_Tiyanki_Bull"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			create_ship = {
				name = "Cow"
				design = "L_Tiyanki_Cow"
			}
			set_location = prev
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 100
			random_list = {
				70 = {
					set_fleet_flag = l_amoeba_hunter
				}
				30 = {
					set_fleet_flag = empty_l_system
				}
			}
			if = {
				limit = { has_fleet_flag = l_amoeba_hunter }
				save_event_target_as = hunting_l_tiyanki
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
			else = {
				queue_actions = {
					wait = { # Cooldown until they start moving
						duration = 320
						random = 80
					}
				}
			}
		}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> DSO_scripted_nanite_ecosystem_effects.txt
DEBUG - Not same trigger has_any_industry_zone in own file 01_industry_district_override.txt
DEBUG - Not same trigger is_fallen_empire in own file z_fallen_empire_override_triggers.txt
DEBUG - Not same trigger is_default_or_fallen in own file z_fallen_empire_override_triggers.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: '
		create_country = {
			name = "NAME_Autonomous_Repurposer"
			type = guardian_scavenger_bot
			flag = {
				icon = {
					category = "spherical"
					file = "flag_spherical_16.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"black"
					"black"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			set_country_flag = guardian_scavenger_bot
			if = {
				limit = { NOT = { has_modifier = scavenger_bot_power } }
				add_modifier = { modifier = scavenger_bot_power	days = -1 }
			}
			save_global_event_target_as = scavenger_bot_country' [re.compile('((\\n\\t+)create_\\w+ = \\{(?:\\2\\t[^{}]+?|(?:\\2\\t[^\\n]+){1,18}))(?:effect = \\{(\\2\\t\\t.*?)\\2\\t\\})?\\2\\}\\s+last_created_\\w+ = \\{\\s+([\\s\\S]+?)\\s+\\}$', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131A60>] <class 'list'> nanite_system_initializers.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = planet
			planet = { is_planet_class = pc_dessanu_relic }
		}
		pop_amenities_usage_mult = -0.10
		pop_housing_usage_mult = -0.10
		planet_resettlement_unemployed_mult = -0.25' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> species_traits_nanites.txt
DEBUG - BLIND MATCH: '		potential = {
			exists = from
			from = { NOT = { has_government = gov_spiritualist_gateway_worshiper } }
		}
		pop_government_ethic_attraction = -0.1' [re.compile('\\t\\tmodifier = \\{\\s+([^{}]*?)\\s*\\}', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131820>] <class 'list'> species_traits_nanites.txt
DEBUG - --- UPGRADING v3 FILE 00_nanite_war_goals.txt TO v4 ---
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: 'every_system_planet = {
					limit = {
						has_deposit_for = shipclass_research_station
					}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: 'every_system_planet = {
					limit = {
						has_deposit_for = shipclass_mining_station
					}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: 'planet = {
					limit = {
						has_deposit_for = shipclass_research_station' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: 'planet = {
					limit = {
						has_deposit_for = shipclass_mining_station' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: '
				any_country = {
					is_country_type = gate_builders
					is_hostile = prev
				}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: '
		any_playable_country = {
			has_modifier = "dessanu_gift"
			any_country = {
				is_country_type = gate_builders
				is_hostile = prev
			}
		}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
DEBUG - BLIND MATCH: 'random_playable_country = {
			limit = {
				has_modifier = dessanu_gift
				any_country = {
					is_country_type = gate_builders
					is_hostile = prev
				}
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
			limit = {
				NOR = { is_ai = yes is_same_empire = event_target:goo_slayer }
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
				limit = {
					NOR = {
						has_event_chain = l_cluster_chain
						has_special_project = LCLUSTER_PROJECT
						is_same_value = root
					}
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
				limit = {
					OR = {
						has_special_project = LCLUSTER_PROJECT
						has_event_chain = l_cluster_chain
					}
					NOT = { is_same_value = root }
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> 01_gray_goo_events_override.txt
DEBUG - BLIND MATCH: '
				any_playable_country = {
					has_origin = civic_gateway_pursuer
					NOT = { is_same_empire = root }
				}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: '
							any_playable_country = {
								has_origin = civic_gateway_worshiper
								is_ai = yes
							}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: '
								any_playable_country = {
									has_origin = civic_gateway_worshiper
									is_ai = yes
								}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: '
				any_playable_country = {
					has_origin = civic_gateway_worshiper
					NOT = { is_same_empire = root }
				}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: 'every_country = {
				limit = {
					has_communications = prev.owner
					OR = {
						is_xenophile = yes
						has_civic = civic_machine_servitor
					}
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
				limit = {
					NOR = {
						has_country_flag = lcluster_opener
						has_country_flag = distar_overhaul_insight_started_flag
					}
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> bh_events.txt
DEBUG - BLIND MATCH: 'random_system_planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no
				}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_system_planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no
				}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_system_planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no
				}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_system_planet = {
					limit = {
						NOR = {
							is_capital = yes
							is_asteroid = yes
							is_star = yes
							is_moon = yes
							is_planet_class = pc_gas_giant
						}
					}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'planet = {
				limit = {
					# is_capital = no
					# is_asteroid = no
					is_star = no' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'planet = {
					limit = {
						NOR = {
							is_capital = yes
							is_asteroid = yes
							is_star = yes
							is_moon = yes
							is_planet_class = pc_gas_giant
						}' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
			any_country = {
				NOT = { is_same_empire = root }
				has_established_contact = root
				has_origin = civic_gateway_worshiper
			}' [re.compile('(\\n\\t+)any_(?:playable_)?country = \\{(\\1[^#]*?)(\\1\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_compatible|merg_is_default_empire) = yes))', re.IGNORECASE|re.ASCII), '\\1any_playable_country = {\\3\\2'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				root.owner = { has_country_flag = dessanu_cult_schism_rebels_of@prev }
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				root = { has_country_flag = dessanu_cult_schism_rebels_of@prev }
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				from = { has_country_flag = dessanu_cult_schism_rebels_of@prev }
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'random_playable_country = {
			limit = {
				root = {
					owner = { has_country_flag = dessanu_cult_schism_rebels_of@prevprev }
				}
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
					create_fleet = {
						name = "NAME_dessanu_cult_schism_Flagship"
						effect = {
							set_owner = prev
							create_ship_design = {
								design = "NAME_DSO_Dagger"
							}
							create_ship = {
								name = "NAME_Glorious_Might"
								design = last_created_design
							}
							create_ship = {
								name = "NAME_Righteous_Zealot"
								design = last_created_design
							}
							create_ship = {
								name = "NAME_Holy_Protector"
								design = last_created_design
							}
							create_ship = {
								name = "NAME_Holy_Defender"
								design = last_created_design
							}
							create_ship = {
								name = "NAME_Divine_Justicar"
								design = last_created_design
							}
							create_ship_design = {
								design = "NAME_dso_dessanu_small_ship_fallen_empire"
							}
							create_ship = {
								name = "NAME_Dawn_of_Creation"
								design = last_created_design
								effect = {
									set_ship_flag = dessanu_cult_schism_flagship
									set_disable_at_health = 0.05
								}
							}
							set_location = event_target:dessanu_cult_schism_flagship_planet
						}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
				create_fleet = {
					name = "NAME_Cult_Defense_Fleet"
					effect = {
						set_owner = prev
						create_ship_design = {
							design = "NAME_DSO_Dagger"
						}
						create_ship = {
							name = "NAME_Final_Judgment"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_The_Chosen_One"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Eternal_Damnation"
							design = last_created_design
						}
						create_ship_design = {
							design = "NAME_dso_dessanu_small_ship_fallen_empire"
						}
						create_ship = {
							name = "NAME_Path_of_the_Pilgrim"
							design = last_created_design
						}
						assign_leader = last_created_leader
						set_location = event_target:dso_story_dessanu_cult_schism_planet
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_aggro_range = 300
						queue_actions = {
							repeat = {
								wait = {
									duration = 100
								}
							}
						}
					}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
				create_fleet = {
					name = "NAME_dessanu_cult_schism_Shipyard"
					effect = {
						set_owner = prev
						create_ship = {
							name = "NAME_dessanu_cult_schism_Shipyard"
							design = "NAME_Citadel"
						}
						set_location = event_target:dso_story_dessanu_cult_schism_planet
						set_fleet_flag = dso_story_dessanu_cult_schism_shipyard
						save_event_target_as = dso_story_dessanu_cult_schism_shipyard
					}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
			create_fleet = {
				name = "NAME_dessanu_cult_schism_Marauders"
				effect = {
					set_owner = prev
					create_ship_design = {
						design = "NAME_DSO_Dagger"
					}
					create_ship = {
						name = "NAME_Heathens_Doom"
						design = last_created_design
					}
					create_ship = {
						name = "NAME_Infidel_Slayer"
						design = last_created_design
					}
					create_ship = {
						name = "NAME_Pious_Crusader"
						design = last_created_design
					}
					create_ship_design = {
						design = "NAME_dso_dessanu_small_ship_fallen_empire"
					}
					create_ship = {
						name = "NAME_Temple_of_Light"
						design = last_created_design
					}
					assign_leader = last_created_leader
					set_location = event_target:dessanu_cult_schism_marauder_planet
					set_fleet_flag = dessanu_cult_schism_marauders
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 500
				}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
				create_fleet = {
					name = "NAME_dessanu_cult_schism_Marauders"
					effect = {
						set_owner = prev
						create_ship_design = {
							design = "NAME_DSO_Dagger"
						}
						create_ship = {
							name = "NAME_Heavenly_Judgment"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Revered_Elder"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Wrath_of_the_Spirits"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Bane_of_the_Heretic"
							design = last_created_design
						}
						assign_leader = last_created_leader
						set_location = event_target:dessanu_cult_schism_marauder_planet
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_aggro_range = 500
						set_fleet_flag = dessanu_cult_schism_marauders
					}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
				create_fleet = {
					name = "NAME_dessanu_cult_schism_Marauders"
					effect = {
						set_owner = prev
						create_ship_design = {
							design = "NAME_DSO_Dagger"
						}
						create_ship = {
							name = "NAME_Divine_Vessel"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Sacred_Might"
							design = last_created_design
						}
						create_ship = {
							name = "NAME_Heavenly_Portent"
							design = last_created_design
						}
						assign_leader = last_created_leader
						set_location = event_target:dessanu_cult_schism_marauder_planet
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_aggro_range = 500
						set_fleet_flag = dessanu_cult_schism_marauders
					}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
							create_fleet = {
								name = "NAME_Hijacked_Fleet"
								effect = {
									set_owner = prev
									create_ship_design = {
										design = "NAME_DSO_Dagger"
									}
									create_ship = {
										name = "NAME_Unyielding_Faith"
										design = last_created_design
									}
									create_ship = {
										name = "NAME_Holy_Avatar"
										design = last_created_design
									}
									create_ship = {
										name = "NAME_Divine_Fury"
										design = last_created_design
										effect = {
											set_ship_flag = dessanu_cult_schism_ship
											set_disable_at_health = 0.05
											save_event_target_as = dessanu_cult_schism_ship
										}
									}
									set_location = event_target:dessanu_cult_schism_hijacked_fleet_planet
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = return_point
									set_aggro_range = 50
									assign_leader = last_created_leader
									queue_actions = {
										repeat = {
											wait = {
												duration = 100
											}
										}
									}
								}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
							create_fleet = {
								name = "NAME_Hijacked_Fleet"
								effect = {
									set_owner = prev
									create_ship_design = {
										design = "NAME_DSO_Dagger"
									}
									create_ship = {
										name = "NAME_Unyielding_Faith"
										design = last_created_design
									}
									create_ship = {
										name = "NAME_Holy_Avatar"
										design = last_created_design
									}
									create_ship = {
										name = "NAME_Divine_Fury"
										design = last_created_design
										effect = {
											set_ship_flag = dessanu_cult_schism_ship
											set_disable_at_health = 0.05
											save_event_target_as = dessanu_cult_schism_ship
										}
									}
									set_location = event_target:dessanu_cult_schism_hijacked_fleet_planet
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = return_point
									set_aggro_range = 50
									assign_leader = last_created_leader
									queue_actions = {
										repeat = {
											wait = {
												duration = 100
											}
										}
									}
								}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: '
			create_fleet = {
				name = "NAME_dessanu_cult_schism_Shipyard"
				effect = {
					set_owner = prev
					create_ship = {
						name = "NAME_dessanu_cult_schism_Shipyard"
						design = Cult_of_The_Open_Gateway_Shipyard_01_key
					}
					set_location = random_owned_planet
				}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> dso_relic_events.txt
DEBUG - BLIND MATCH: 'every_country = {
			limit = {
				has_communications = prev.owner
				OR = {
					is_xenophile = yes
					has_civic = civic_machine_servitor
				}
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> harvester_engine_events.txt
DEBUG - BLIND MATCH: 'random_system_planet = {
				limit = {
					OR = {
						is_planet_class = pc_gray_goo
						is_planet_class = pc_bh_harvest
						is_planet_class = pc_bh_harvest_colony
						is_planet_class = pc_bh_harvested
						is_nanite_forgeworld = yes
					}
				}' [re.compile('(every|random|count|ordered)_system_(?:colony|planet) = \\{(\\s+)([^{}#]*limit = \\{)(\\2\\t[^#]+?)\\2\\t(?:has_owner = yes|is_colony = yes|exists = owner){1,3}', re.IGNORECASE|re.ASCII), '\\1_system_colony = {\\2\\3\\2\\thas_owner = yes\\4'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: 'planet = {
				limit = {
					OR = {
						is_planet_class = pc_gray_goo
						is_planet_class = pc_bh_harvest
						is_planet_class = pc_bh_harvest_colony
						is_planet_class = pc_bh_harvested
						is_nanite_forgeworld = yes
					}' [re.compile('planet = \\{((\\s+)[^{}#]*limit = \\{)(\\2\\t?[^#]*?\\2\\t(?:owner|controller) = \\{)', re.IGNORECASE|re.ASCII), 'colony = {\\1\\2\\thas_owner = yes\\3'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				has_country_flag = harvester_subterranean_nation
				is_country_type = adversary
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: 'random_country = {
				limit = {
					is_country_type = adversary
					has_country_flag = harvester_subterranean_nation
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				is_country_type = adversary
				has_country_flag = harvester_subterranean_nation
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				is_country_type = adversary
				has_country_flag = harvester_subterranean_nation
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> harvest_world_events.txt
DEBUG - BLIND MATCH: '
		create_species = {
			name = random
			class = random_non_machine
			portrait = random
			traits = random
			homeworld = planet
		}
		last_created_species = { save_event_target_as = harvester_subterranean_species' [re.compile('((\\n\\t+)create_\\w+ = \\{(?:\\2\\t[^{}]+?|(?:\\2\\t[^\\n]+){1,18}))(?:effect = \\{(\\2\\t\\t.*?)\\2\\t\\})?\\2\\}\\s+last_created_\\w+ = \\{\\s+([\\s\\S]+?)\\s+\\}$', re.IGNORECASE|re.ASCII), <function add_code_cosmetic.<locals>.<lambda> at 0x0000028249131A60>] <class 'list'> harvest_world_events.txt
DEBUG - Compiled: re.compile('\\s(?:any|every|random|count|ordered)_neighbor_system = \\{[^{}]+?\\s+ignore_hyperlanes = (?:yes|no)\\n?', re.IGNORECASE|re.MULTILINE) - <class 're.Pattern'>
INFO - Match:

			create_pop_group = {
				species = event_target:harvester_subterranean_species
				ethos = { ethic = "ethic_spiritualist" }
			}
			event_target:last_created_pop_group = {
				set_citizenship_type = {
					type = citizenship_slavery
					cooldown = yes
				}
Multiline replace:

			create_pop_group = {
				species = event_target:harvester_subterranean_species
				ethos = { ethic = "ethic_spiritualist" }
				effect = {
					set_citizenship_type = {
						type = citizenship_slavery
						cooldown = yes
					}
				}
INFO - 💾 WRITE FILE: events\harvest_world_events.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
			limit = {
				any_owned_planet = {
					is_homeworld = no
					original_owner = yes
					has_planet_flag = nanite_ecosystem_seismic_disturbance_friendly
					check_variable = { which = "angry_subterraneans" value > 2 }
				}
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				has_country_flag = nanite_ecosystem_subterranean_nation
				is_country_type = adversary
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: 'random_country = {
				limit = {
					is_country_type = adversary
					has_country_flag = nanite_ecosystem_subterranean_nation
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				is_country_type = adversary
				has_country_flag = nanite_ecosystem_subterranean_nation
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: 'random_country = {
			limit = {
				is_country_type = adversary
				has_country_flag = nanite_ecosystem_subterranean_nation
			}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: 'every_playable_country = {
				limit = {
					OR = {
						has_country_flag = encountered_first_lgate
						has_country_flag = ldragon_known
						has_technology = tech_lgate_activation
						has_technology = tech_nanite_technology_mastery
					}
				}' [re.compile('(every|random|count|ordered)_(?:playable_)?country = \\{((\\s+)[^{}#]*limit = \\{)(\\3[^#]*?)(\\3\\t(?:has_event_chain = \\w+|is_ai = no|is_country_type = default|has_policy_flag = \\w+|(?:is_zofe_co, re.IGNORECASE|re.ASCII), '\\1_playable_country = {\\2\\5\\4'] <class 'list'> outcome_nanite_ecosystem_events.txt
DEBUG - BLIND MATCH: '
				create_country = {
					name = "L_Gaia_Incarnation"
					type = lgaia_incarnation_country
					effect = {
						set_name = "L_Gaia_Incarnation"
						save_global_event_target_as = l_gaia_incarnation
						every_playable_country = { establish_communications_no_message = prev }
						set_faction_hostility = { target = from set_hostile = yes }
					}' [re.compile('(?s)((\\n\\t+)create_\\w+ = \\{\\2\\t[^{}]+?)(\\2\\teffect = \\{\\2\\t\\t.*?\\2\\t\\})(.*?)$', re.IGNORECASE|re.DOTALL|re.ASCII), '\\1\\4\\3'] <class 'list'> outcome_nanite_ecosystem_events.txt
INFO - ✔ Script completed in 4.866 s
INFO - Main Version = 4.1 (Sub-version = .3)
INFO - Distant Stars Overhaul & Playable Nanite Machines version 4.1.3.0 on 'descriptor.mod' updated to 4.1.3!
INFO - ✔ Done! D:\Gog Games\Settings\Distant-Stars-Overhaul.git\distant_stars_overhaul_original
